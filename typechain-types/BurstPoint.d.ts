/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BurstPointInterface extends ethers.utils.Interface {
  functions: {
    "beginGame(uint256)": FunctionFragment;
    "bet(uint256,uint256)": FunctionFragment;
    "betLast()": FunctionFragment;
    "closeGame(uint256)": FunctionFragment;
    "escape(uint256)": FunctionFragment;
    "gameLast()": FunctionFragment;
    "getBurstValue(uint256)": FunctionFragment;
    "getGameRecords(uint256)": FunctionFragment;
    "increasePerBlock()": FunctionFragment;
    "multiple()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerAdd()": FunctionFragment;
    "random(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "beginGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "betLast", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closeGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escape",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gameLast", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBurstValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameRecords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "multiple", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerAdd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "random",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "beginGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betLast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "escape", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameLast", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBurstValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiple", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "random", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class BurstPoint extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BurstPointInterface;

  functions: {
    beginGame(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bet(
      id: BigNumberish,
      burstValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    betLast(overrides?: CallOverrides): Promise<[BigNumber]>;

    closeGame(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    escape(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gameLast(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBurstValue(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGameRecords(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        ([BigNumber, BigNumber, BigNumber, number] & {
          betAmount: BigNumber;
          burstValue: BigNumber;
          escapeBlockNum: BigNumber;
          status: number;
        })[]
      ]
    >;

    increasePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiple(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerAdd(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    random(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  beginGame(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bet(
    id: BigNumberish,
    burstValue: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  betLast(overrides?: CallOverrides): Promise<BigNumber>;

  closeGame(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  escape(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gameLast(overrides?: CallOverrides): Promise<BigNumber>;

  getBurstValue(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGameRecords(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string[],
      ([BigNumber, BigNumber, BigNumber, number] & {
        betAmount: BigNumber;
        burstValue: BigNumber;
        escapeBlockNum: BigNumber;
        status: number;
      })[]
    ]
  >;

  increasePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  multiple(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerAdd(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  random(number: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    beginGame(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    bet(
      id: BigNumberish,
      burstValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    betLast(overrides?: CallOverrides): Promise<BigNumber>;

    closeGame(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    escape(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    gameLast(overrides?: CallOverrides): Promise<BigNumber>;

    getBurstValue(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameRecords(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        ([BigNumber, BigNumber, BigNumber, number] & {
          betAmount: BigNumber;
          burstValue: BigNumber;
          escapeBlockNum: BigNumber;
          status: number;
        })[]
      ]
    >;

    increasePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    multiple(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerAdd(overrides?: CallOverrides): Promise<void>;

    random(number: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    beginGame(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bet(
      id: BigNumberish,
      burstValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    betLast(overrides?: CallOverrides): Promise<BigNumber>;

    closeGame(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    escape(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gameLast(overrides?: CallOverrides): Promise<BigNumber>;

    getBurstValue(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameRecords(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    multiple(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerAdd(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    random(number: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    beginGame(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bet(
      id: BigNumberish,
      burstValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    betLast(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closeGame(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    escape(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gameLast(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBurstValue(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameRecords(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiple(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerAdd(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    random(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
